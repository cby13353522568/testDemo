pip install django

cmd进入想要创建项目的目录，执行语句
django-admin startproject HelloDjango  (django-admin.py startproject HelloDjango)

配置数据库：  (net start mysql)
1.setting.py 文件中DATABASES选项
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        #'NAME': BASE_DIR / 'db.sqlite3',
        'NAME':'django_test',  #数据库名
        'USER':'root',
        'PASSWORD':'123456',
        'HOST':'localhost',
        'PORT':'3306',
    }
}
2.__init__.py 中：
import pymysql
pymysql.version_info = (1, 4, 13, "final", 0)
pymysql.install_as_MySQLdb()

创建应用：
一个项目中可以有多个应用，每个应用进行一种业务处理
1.进入项目目录执行 python manage.py startapp MyApp
2.在setting.py中将MyApp应用加入到INSTALL_APPS配置项中

定义模型：
有一个数据表，就对应有一个模型类（models.py中从django.db.models继承）

迁移文件：
生成迁移文件 -- python manage.py makemigrations (在migrations目录下生成迁移文件)
执行迁移 -- python manage.py migrate
配置的库中生成对应表字段

测试数据（模型）：
进入到python shell 环境(python manage.py shell)  # 不能直接使用python进入，找不到配置文件
引入包
from MyApp.models import Grades,Students
from django.utils import timezone
from datetime import *
1.查询所有数据 类名.objects.all()
查询某个数据 类名.objects.get(pk=2)
grade1.students_set.all()  # 关联查询
2.新增 创建对象 grade1 = Grades()
grade1.gName = "1"
grade1.save()  #和数据库交互
student1.sGrade = grade1  #外键
grade1.students_set.create(sName="s2",xxx='xx') # 第二种创建外键的方法
grade1.students_set.all()   # 班级1 中所有的学生
3.修改
grade1.gName = "c"
grade1.save()
4.删除
grade1.delete()

启动服务
python manage.py runserver ip:port  # 不写ip即为本机，port默认8000

创建管理员
1.setting.py INSTALL_APPS中有admin应用
2.python manage.py createsuperuser ,依次输入用户名，邮箱，密码cby/123456
3.登录管理员 127.0.0.1:8000/admin
4. settings.py 中汉化
LANGUAGE_CODE = 'zh-Hans'
TIME_ZONE = 'Asia/Shanghai'
5.管理数据表 修改admin.py文件
from .models import Grades, Students
#注册  为了让 admin 界面管理某个数据模型，我们需要先注册该数据模型到 admin
admin.site.register(Grades)
6.自定义管理页面及属性
class GradesAdmin(admin.ModelAdmin)  # 继承admin.ModelAdmin
    # 列表页属性
    list_display = ['pk','gname']  # 需要显示的字段
    list_filter = ['gname']   # 过滤条件
    list_fields = ['gname']     # 查询条件
    list_per_page = 5    # 分页，每5条一页

    # 添加修改页属性
    fields = []   # 字段顺序，注意不能加pk
    fieldsets = [('num',{'fields':['gGirlNum','gBoyNum']}),('xxx',{'fields':['xxx','xxx']})]   # 给属性分组
自定义后的注册(此时才能用到这些属性)：
admin.site.register(Grades, GradesAdmin)
7. 关联对象： 新增班级的同时 可以直接新增学生
class StudentInfo(admin.TabularInline):
    model = Students
    extra = 2
同时在GradesAdmin 类中加一行  inlines=[StudentsInfo]
8. 布尔值 显示
在StudentsAdmin类中定义方法
def gender(self):
    if self.sgender:
        return "男"
    else：
        return "女"
gender.short_description = '性别'  # 设置列名
然后传入 list_display = ['pk',gender]
9. 装饰器 注册
@admin.register(Grades)   # =admin.site.register(Grades, GradesAdmin)


视图
1.定义视图，view.py 匹配请求，返回相应
from django.http import HttpResponse
def index(request):
    return HttpResponse("good")
2.配置url控制器
修改 项目目录下(HelloDjango下的) urls.py
在MyApp下新建 urls.py 文件
关联到view.py中的方法

模板
1.html页面，用view 拿到的数据渲染页面
2.创建templates目录，在该目录下创建对应应用的模板目录 （HelloDjango/templates/MyApp）
3.配置模板路径 settings.py -- templates--DIR
4.模板语法 {{输出值，变量或对象的属性}}  {%代码段%}

流程：
1. 写grades.html模板
2. 定义视图，从models读取数据
3. 匹配url
