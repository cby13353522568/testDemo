根目录url配置：settings.py
ROOT_URLCONF = 'HelloDjango.urls'

url反向解析 作用：使用链接时(a标签),修改了url地址路由，会动态生成url
path('', include(('MyApp.urls', 'MyApp'), namespace="MyApp"))  # 匹配根目录127.0.0.1:8080
path('grades/', views.grades,name="grade"),

视图函数
request 一个HttpRequest实例，浏览器发过来的内容
第二个参数一般就是url控制器获取的参数(正则)

错误页面404 在templates目录下定义 404.html
{{request.path}} 返回的是 导致错误的网址
配置settings.py
debug 如果为True，则不会调用404页面
allowed_hosts=['*']

HttpRequest对象  服务器接收到请求后，根据报文创建对象
属性：
path 请求的完整路径（不包括域名和端口）
method 请求方式 GET POST
encoding 浏览器提交数据的编码方式，一般为UTF-8

1.GET 类似字典的对象，包含了get请求的所有参数
def get1(request):
    a = request.GET.get('a')
    b = request.GET.get('b')
    return HttpResponse(a+" "+b)
2.POST 类似字典的对象，包含了post请求的所有参数，多用表单
settings.py 注释掉middleware中的 csrf，否则会403
name = request.POST.get('name')  # 表单中的name 即为键

FILES 类似字典对象，包含所有上传的文件
COOKIES 字典，包含所有cookie
session 类似字典对象， 表示当前会话
方法：
is_ajax() 如果是XMLHttpRequest发起的，返回Ture
QueryDict对象：
request对象中GET,POST都属于QueryDict对象
get()  根据键获取值  www.baidu.com/hello?a=1&b=2
getlist() 可返回多个值


HttpResponse对象
return render(request,'MyApp/1.html',{"students":studentsList})
属性：
content 返回内容类型
content-type 指定输出的MIME类型，即页面怎么渲染
charset编码格式
status_code 响应状态码 200 403 404 500
方法：
init 使用页面内容实例化HttpResponse对象
write(content) 以文件形式写入
flush() 刷新缓冲区
set_cookie(key,value="",max_age=None,exprise=None)
delete_cookie(key)
子类：
1.HttpResponseRedirect 重定向
from django.http import HttpResponseRedirect
from django.shortcuts import redirect
def redirect1(request):
    #return HttpResponseRedirect("/myapp/redirect2")
    return redirect("/myapp/redirect2")
2.JsonResponse 返回json数据，一般用于返回异步请求
from django.http import JsonResponse
def ajaxTest(request):
    if request.is_ajax():
        res = JsonResponse({})  # 这里其实是调用JsonResponse的__init__()方法，data为字典数据
    return res

状态保存 客户端或服务端保存会话数据
cookie 所有数据存在客户端，不能存敏感数据
session 所有数据存在服务端，在客户端用cookie存储session_id
启用session：settings.py INSTALLED_APPS和MIDDLEWARE, 默认启用状态
session 方法：
get(key,default=None) 根据键获取session
clear() 清空所有会话
flush() 删除当前会话并删除会话的cookie
设置过期时间：
set_expiry(value) # 默认两星期过期
value 可以为 int，单位为s
时间对象，设置过期时间
为0 表示关闭浏览器是失效
None 永不过期
存储session 的位置：
使用redis缓存session
1.pip install django-redis-sessions
2.setting.py 配置
SESSION_ENGINE = 'redis_sessions.session'
SESSION_REDIS_HOST = 'localhost'
SESSION_REDIS_PORT = 6379
SESSION_REDIS_DB = 0
SESSION_REDIS_PASSWORD = '123456'
SESSION_REDIS_PREFIX = 'session'

